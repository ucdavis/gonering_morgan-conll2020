ovs <- filter(df, Word_Order == "OVS")
osv <- filter(df, Word_Order == "OSV")
svo_ent_mean <- weighted.mean(svo$Entropy_Deviation_Score, svo$Probability)
sov_ent_mean <- weighted.mean(sov$Entropy_Deviation_Score, sov$Probability)
vso_ent_mean <- weighted.mean(vso$Entropy_Deviation_Score, vso$Probability)
vos_ent_mean <- weighted.mean(vos$Entropy_Deviation_Score, vos$Probability)
ovs_ent_mean <- weighted.mean(ovs$Entropy_Deviation_Score, ovs$Probability)
osv_ent_mean <- weighted.mean(osv$Entropy_Deviation_Score, osv$Probability)
tribble(
~word_order, ~score,
"OVS", ovs_ent_mean,
"SOV", sov_ent_mean,
"OSV", osv_ent_mean,
"VOS", vos_ent_mean,
"VSO", vso_ent_mean,
"SVO", svo_ent_mean
) %>% arrange(score) %>%
mutate(language = df$language[[1]]) %>%
mutate(measure = "entropy UID") %>%
mutate(rank = min_rank(score))
}
calcSurpRankings <- function(df) {
svo <- filter(df, Word_Order == "SVO")
sov <- filter(df, Word_Order == "SOV")
vso <- filter(df, Word_Order == "VSO")
vos <- filter(df, Word_Order == "VOS")
ovs <- filter(df, Word_Order == "OVS")
osv <- filter(df, Word_Order == "OSV")
svo_surp_mean <- weighted.mean(svo$Surprisal_Deviation_Score, svo$Probability)
sov_surp_mean <- weighted.mean(sov$Surprisal_Deviation_Score, sov$Probability)
vso_surp_mean <- weighted.mean(vso$Surprisal_Deviation_Score, vso$Probability)
vos_surp_mean <- weighted.mean(vos$Surprisal_Deviation_Score, vos$Probability)
ovs_surp_mean <- weighted.mean(ovs$Surprisal_Deviation_Score, ovs$Probability)
osv_surp_mean <- weighted.mean(osv$Surprisal_Deviation_Score, osv$Probability)
tribble(
~word_order, ~score,
"OVS", ovs_surp_mean,
"SOV", sov_surp_mean,
"OSV", osv_surp_mean,
"VOS", vos_surp_mean,
"VSO", vso_surp_mean,
"SVO", svo_surp_mean
) %>% arrange(score) %>%
mutate(language = df$language[[1]]) %>%
mutate(measure = "surprisal UID") %>%
mutate(rank = min_rank(score))
}
#              farsi, finnish, french, galician, german, gothic, greek, hebrew,
#              hindi, hungarian, indonesian, irish, italian, japanese, karelian,
#              kazakh, komi_permyak, komi_zyrian, korean, kurmanji, latin, latvian,
#              lithuanian, livvi, maltese, mandarin, marathi, mbya_guarani, moksha,
#              nigerian_pidgin, north_sami, norwegian, old_church_slavonic, old_french,
#              old_russian, polish, portuguese, romanian, russian, sanskrit,
#              scottish_gaelic, serbian, skolt_sami, slovakian, slovenian, spanish,
#              swedish, swedish_sign, swiss_german, tagalog, tamil, telugu, thai,
#              turkish, ukrainian, upper_sorbian, urdu, uyghur, vietnamese, warlpiri,
#              welsh, wolof, yoruba)
langs <- list(basque, breton, dutch, english, german, hindi, hungarian, indonesian, irish,
japanese, korean, mandarin, mbya_guarani, scottish_gaelic, tagalog,
turkish, vietnamese, warlpiri, welsh, wolof)
svo_agg_ent <- big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "SVO") %>% select(score) %>% summarize(avg = mean(score))
big_table_o_data <- tribble(
~language, ~measure, ~word_order, ~score, ~rank
) %>%
bind_rows(map_df(langs, function(df) {
bind_rows(calcEntRankings(filter(df, !str_detect(language, "subset"))),
calcSurpRankings(filter(df, !str_detect(language, "subset"))),
#calcMIRankings(filter(df, !str_detect(language, "subset"))))
}))
big_table_o_data <- tribble(
~language, ~measure, ~word_order, ~score, ~rank
) %>%
bind_rows(map_df(langs, function(df) {
bind_rows(calcEntRankings(filter(df, !str_detect(language, "subset"))),
calcSurpRankings(filter(df, !str_detect(language, "subset"))
#calcMIRankings(filter(df, !str_detect(language, "subset"))
))
}))
svo_agg_ent <- big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "SVO") %>% select(score) %>% summarize(avg = mean(score))
sov_agg_ent <- big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "SOV") %>% select(score) %>% summarize(avg = mean(score))
vso_agg_ent <- big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "VSO") %>% select(score) %>% summarize(avg = mean(score))
vos_agg_ent <- big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "VOS") %>% select(score) %>% summarize(avg = mean(score))
ovs_agg_ent <- big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "OVS") %>% select(score) %>% summarize(avg = mean(score))
osv_agg_ent <- big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "OSV") %>% select(score) %>% summarize(avg = mean(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "SVO") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "VSO") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "VOS") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "SOV") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "OVS") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "entropy UID") %>% filter(word_order == "OSV") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "surprisal UID") %>% filter(word_order == "OSV") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "surprisal UID") %>% filter(word_order == "OVS") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "surprisal UID") %>% filter(word_order == "SOV") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "surprisal UID") %>% filter(word_order == "SVO") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "surprisal UID") %>% filter(word_order == "VOS") %>% select(score) %>% summarize(sd = sd(score))
big_table_o_data %>% filter(language != "English CHILDES") %>% filter(measure == "surprisal UID") %>% filter(word_order == "VSO") %>% select(score) %>% summarize(sd = sd(score))
breton <- read_csv("ud_bre-results-excl_singletons-mi_only-mi_only.csv") %>%
mutate(language = "Breton")
breton <- read_csv("ud_bre-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Breton")
welsh <- read_csv("ud_cym-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Welsh")
german <- read_csv("ud_deu-results-excl_singletons-mi_only.csv") %>%
mutate(language = "German") # %>%
german <- read_csv("ud_deu-results-excl_singletons-mi_only.csv") %>%
mutate(language = "German") # %>%
german <- read_csv("ud_deu-results-excl_singletons-mi_only.csv") %>%
mutate(language = "German")
english <- read_csv("ud_eng-results-excl_singletons-mi_only.csv") %>%
mutate(language = "English") # %>%
basque <- read_csv("ud_eus-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Basque") # %>%
irish <- read_csv("ud_gae-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Irish")
scottish_gaelic <- read_csv("ud_gai-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Scottish Gaelic")
hindi <- read_csv("ud_hin-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Hindi") # %>%
hungarian <- read_csv("ud_hun-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Hungarian") # %>%
indonesian <- read_csv("ud_ind-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Indonesian") # %>%
japanese <- read_csv("ud_ja-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Japanese") # %>%
korean <- read_csv("ud_kor-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Korean") # %>%
mbya_guarani <- read_csv("ud_mgu-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Mbya Guarani")
dutch <- read_csv("ud_ned-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Dutch") # %>%
tagalog <- read_csv("ud_tag-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Tagalog")
turkish <- read_csv("ud_tur-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Turkish") # %>%
vietnamese <- read_csv("ud_vie-results-excl_singletons-mi_only.csv") %>%
mutate(I2 = as.double(I2), language = "Vietnamese") # %>%
vietnamese <- read_csv("ud_vie-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Vietnamese") # %>%
warlpiri <- read_csv("ud_war-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Warlpiri")
wolof <- read_csv("ud_wol-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Wolof") # %>%
mandarin <- read_csv("ud_zho-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Mandarin") # %>%
calcMIRankings <- function(df) {
svo <- filter(df, Word_Order == "SVO")
sov <- filter(df, Word_Order == "SOV")
vso <- filter(df, Word_Order == "VSO")
vos <- filter(df, Word_Order == "VOS")
ovs <- filter(df, Word_Order == "OVS")
osv <- filter(df, Word_Order == "OSV")
svo_mi_mean <- weighted.mean(svo$Mutual_Information, svo$Probability)
sov_mi_mean <- weighted.mean(sov$Mutual_Information, sov$Probability)
vso_mi_mean <- weighted.mean(vso$Mutual_Information, vso$Probability)
vos_mi_mean <- weighted.mean(vos$Mutual_Information, vos$Probability)
ovs_mi_mean <- weighted.mean(ovs$Mutual_Information, ovs$Probability)
osv_mi_mean <- weighted.mean(osv$Mutual_Information, osv$Probability)
tribble(
~word_order, ~score,
"OVS", ovs_mi_mean,
"SOV", sov_mi_mean,
"OSV", osv_mi_mean,
"VOS", vos_mi_mean,
"VSO", vso_mi_mean,
"SVO", svo_mi_mean
) %>% arrange(desc(score)) %>%
mutate(language = df$language[[1]]) %>%
mutate(measure = "mi") %>%
mutate(rank = min_rank(desc(score)))
}
calcZScoreRankings <- function(df) {
svo <- filter(df, Word_Order == "SVO")
sov <- filter(df, Word_Order == "SOV")
vso <- filter(df, Word_Order == "VSO")
vos <- filter(df, Word_Order == "VOS")
ovs <- filter(df, Word_Order == "OVS")
osv <- filter(df, Word_Order == "OSV")
svo_z_mean <- weighted.mean(svo$mi_z_score, svo$Probability)
sov_z_mean <- weighted.mean(sov$mi_z_score, sov$Probability)
vso_z_mean <- weighted.mean(vso$mi_z_score, vso$Probability)
vos_z_mean <- weighted.mean(vos$mi_z_score, vos$Probability)
ovs_z_mean <- weighted.mean(ovs$mi_z_score, ovs$Probability)
osv_z_mean <- weighted.mean(osv$mi_z_score, osv$Probability)
tribble(
~word_order, ~mi_z_score,
"OVS", ovs_z_mean,
"SOV", sov_z_mean,
"OSV", osv_z_mean,
"VOS", vos_z_mean,
"VSO", vso_z_mean,
"SVO", svo_z_mean
) %>% arrange(desc(mi_z_score)) %>%
mutate(language = df$language[[1]])
}
bind_rows(#calcEntRankings(filter(df, !str_detect(language, "subset"))),
#calcSurpRankings(filter(df, !str_detect(language, "subset")),
calcMIRankings(filter(df, !str_detect(language, "subset"))))
big_table_o_data <- tribble(
~language, ~measure, ~word_order, ~score, ~rank
) %>%
bind_rows(map_df(langs, function(df) {
bind_rows(#calcEntRankings(filter(df, !str_detect(language, "subset"))),
#calcSurpRankings(filter(df, !str_detect(language, "subset")),
calcMIRankings(filter(df, !str_detect(language, "subset"))))
}))
class_accs <- left_join(filter(big_table_o_data, rank == 1), rename(meta, language = Language), big_table_o_data, by = "language") %>%
mutate(acc = as.integer(word_order == Classification))
prediction_accuracies_class <- tribble(
#~ent_uid, ~surp_uid,
~mi,
#sum(filter(class_accs, measure == "entropy UID")$acc), sum(filter(class_accs, measure == "surprisal UID")$acc),
sum(filter(class_accs, measure == "mi")$acc)
)
prediction_accuracies_class
most_common_word_order <- function(df) {
x <- select(df, SVO, SOV, VSO, VOS, OVS, OSV)
colnames(x)[apply(x,1,which.max)]
}
count_accs <- left_join(filter(big_table_o_data, rank == 1), rename(mutate(meta, most_common = most_common_word_order(meta)), language = Language), big_table_o_data, by = "language") %>%
mutate(acc = as.integer(word_order == most_common))
prediction_accuracies_counts <- tribble(
#~ent_uid, ~surp_uid,
~mi,
#sum(filter(count_accs, measure == "entropy UID")$acc), sum(filter(count_accs, measure == "surprisal UID")$acc),
sum(filter(count_accs, measure == "mi")$acc)
)
prediction_accuracies_counts
6/20
calc_precision <- function(m, class) {
true_pos <- class_accs %>%
filter(measure == m, Classification == class) %>%
select(acc) %>%
sum
false_pos <- class_accs %>%
filter(measure == m, word_order == class, Classification != class) %>%
nrow
returnValue(true_pos/(true_pos+false_pos))
}
calc_recall <- function(m, class) {
true_pos <- class_accs %>%
filter(measure == m, Classification == class) %>%
select(acc) %>%
sum
returnValue(true_pos/(unique(select(filter(class_accs, measure == m, Classification == class), language, acc)$language) %>% length))
}
(confusion_matrix <- tribble(
~measure, ~svo_precision, ~svo_recall, ~sov_precision, ~sov_recall, ~vso_precision, ~vso_recall,
# "entropy UID", 100*calc_precision(m = "entropy UID", class = "SVO"), 100*calc_recall(m = "entropy UID", class = "SVO"), 100*calc_precision(m = "entropy UID", class = "SOV"), 100*calc_recall(m = "entropy UID", class = "SOV"), 100*calc_precision(m = "entropy UID", class = "VSO"), 100*calc_recall(m = "entropy UID", class = "VSO"),
#  "surprisal UID", 100*calc_precision(m = "surprisal UID", class = "SVO"), 100*calc_recall(m = "surprisal UID", class = "SVO"), 100*calc_precision(m = "surprisal UID", class = "SOV"), 100*calc_recall(m = "surprisal UID", class = "SOV"), 100*calc_precision(m = "surprisal UID", class = "VSO"), 100*calc_recall(m = "surprisal UID", class = "VSO"),
"mi", 100*calc_precision(m = "mi", class = "SVO"), 100*calc_recall(m = "mi", class = "SVO"), 100*calc_precision(m = "mi", class = "SOV"), 100*calc_recall(m = "mi", class = "SOV"), 100*calc_precision(m = "mi", class = "VSO"), 100*calc_recall(m = "mi", class = "VSO")
))
z_score <- function(df) {
mean_mi <- mean(df$Mutual_Information)
sd_mi <- sd(df$Mutual_Information)
df %>% mutate(mi_z_score = (Mutual_Information-mean_mi)/sd_mi)
}
z_scores <- tribble(
~language, ~word_order, ~score
) %>% bind_rows(map_df(langs, function(df) {
rename(filter(df, !str_detect(language, "subset")) %>%
z_score %>%
calcZScoreRankings, score = mi_z_score)
}))
(svo_agg_mi <- z_scores %>% filter(word_order == "SVO") %>% select(score) %>% summarize(avg = mean(score)))
(sov_agg_mi <- z_scores %>% filter(word_order == "SOV") %>% select(score) %>% summarize(avg = mean(score)))
(vso_agg_mi <- z_scores %>% filter(word_order == "VSO") %>% select(score) %>% summarize(avg = mean(score)))
(vos_agg_mi <- z_scores %>% filter(word_order == "VOS") %>% select(score) %>% summarize(avg = mean(score)))
(ovs_agg_mi <- z_scores %>% filter(word_order == "OVS") %>% select(score) %>% summarize(avg = mean(score)))
(osv_agg_mi <- z_scores %>% filter(word_order == "OSV") %>% select(score) %>% summarize(avg = mean(score)))
(tribble(
~word_order, ~score,
"OVS", ovs_agg_mi,
"SOV", sov_agg_mi,
"OSV", osv_agg_mi,
"VOS", vos_agg_mi,
"VSO", vso_agg_mi,
"SVO", svo_agg_mi
) %>% arrange(desc(score)))
(tribble(
~word_order, ~score,
"OVS", ovs_agg_mi[[1]],
"SOV", sov_agg_mi[[1]],
"OSV", osv_agg_mi[[1]],
"VOS", vos_agg_mi[[1]],
"VSO", vso_agg_mi[[1]],
"SVO", svo_agg_mi[[1]]
) %>% arrange(desc(score)))
#              farsi, finnish, french, galician, german, gothic, greek, hebrew,
#              hindi, hungarian, indonesian, irish, italian, japanese, karelian,
#              kazakh, komi_permyak, komi_zyrian, korean, kurmanji, latin, latvian,
#              lithuanian, livvi, maltese, mandarin, marathi, mbya_guarani, moksha,
#              nigerian_pidgin, north_sami, norwegian, old_church_slavonic, old_french,
#              old_russian, polish, portuguese, romanian, russian, sanskrit,
#              scottish_gaelic, serbian, skolt_sami, slovakian, slovenian, spanish,
#              swedish, swedish_sign, swiss_german, tagalog, tamil, telugu, thai,
#              turkish, ukrainian, upper_sorbian, urdu, uyghur, vietnamese, warlpiri,
#              welsh, wolof, yoruba)
langs <- list(basque, breton, dutch, english, german, hindi, hungarian, indonesian, irish,
japanese, korean, mandarin, mbya_guarani, scottish_gaelic, tagalog,
turkish, vietnamese, warlpiri, welsh, wolof)
big_table_o_data <- tribble(
~language, ~measure, ~word_order, ~score, ~rank
) %>%
bind_rows(map_df(langs, function(df) {
bind_rows(#calcEntRankings(filter(df, !str_detect(language, "subset"))),
#calcSurpRankings(filter(df, !str_detect(language, "subset")),
calcMIRankings(filter(df, !str_detect(language, "subset"))))
}))
big_table_o_data
setwd("C:/Users/brenn/Documents/Results/singletons excluded")
library(tidyverse)
breton <- read_csv("ud_bre-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Breton")
welsh <- read_csv("ud_cym-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Welsh")
german <- read_csv("ud_deu-results-excl_singletons-mi_only.csv") %>%
mutate(language = "German") # %>%
english <- read_csv("ud_eng-results-excl_singletons-mi_only.csv") %>%
mutate(language = "English") # %>%
basque <- read_csv("ud_eus-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Basque") # %>%
irish <- read_csv("ud_gae-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Irish")
scottish_gaelic <- read_csv("ud_gai-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Scottish Gaelic")
hindi <- read_csv("ud_hin-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Hindi") # %>%
hungarian <- read_csv("ud_hun-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Hungarian") # %>%
indonesian <- read_csv("ud_ind-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Indonesian") # %>%
japanese <- read_csv("ud_ja-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Japanese") # %>%
korean <- read_csv("ud_kor-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Korean") # %>%
mbya_guarani <- read_csv("ud_mgu-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Mbya Guarani")
dutch <- read_csv("ud_ned-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Dutch") # %>%
tagalog <- read_csv("ud_tag-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Tagalog")
turkish <- read_csv("ud_tur-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Turkish") # %>%
vietnamese <- read_csv("ud_vie-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Vietnamese") # %>%
warlpiri <- read_csv("ud_war-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Warlpiri")
wolof <- read_csv("ud_wol-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Wolof") # %>%
mandarin <- read_csv("ud_zho-results-excl_singletons-mi_only.csv") %>%
mutate(language = "Mandarin") # %>%
calcMIRankings <- function(df) {
svo <- filter(df, Word_Order == "SVO")
sov <- filter(df, Word_Order == "SOV")
vso <- filter(df, Word_Order == "VSO")
vos <- filter(df, Word_Order == "VOS")
ovs <- filter(df, Word_Order == "OVS")
osv <- filter(df, Word_Order == "OSV")
svo_mi_mean <- weighted.mean(svo$Mutual_Information, svo$Probability)
sov_mi_mean <- weighted.mean(sov$Mutual_Information, sov$Probability)
vso_mi_mean <- weighted.mean(vso$Mutual_Information, vso$Probability)
vos_mi_mean <- weighted.mean(vos$Mutual_Information, vos$Probability)
ovs_mi_mean <- weighted.mean(ovs$Mutual_Information, ovs$Probability)
osv_mi_mean <- weighted.mean(osv$Mutual_Information, osv$Probability)
tribble(
~word_order, ~score,
"OVS", ovs_mi_mean,
"SOV", sov_mi_mean,
"OSV", osv_mi_mean,
"VOS", vos_mi_mean,
"VSO", vso_mi_mean,
"SVO", svo_mi_mean
) %>% arrange(desc(score)) %>%
mutate(language = df$language[[1]]) %>%
mutate(measure = "mi") %>%
mutate(rank = min_rank(desc(score)))
}
calcZScoreRankings <- function(df) {
svo <- filter(df, Word_Order == "SVO")
sov <- filter(df, Word_Order == "SOV")
vso <- filter(df, Word_Order == "VSO")
vos <- filter(df, Word_Order == "VOS")
ovs <- filter(df, Word_Order == "OVS")
osv <- filter(df, Word_Order == "OSV")
svo_z_mean <- weighted.mean(svo$mi_z_score, svo$Probability)
sov_z_mean <- weighted.mean(sov$mi_z_score, sov$Probability)
vso_z_mean <- weighted.mean(vso$mi_z_score, vso$Probability)
vos_z_mean <- weighted.mean(vos$mi_z_score, vos$Probability)
ovs_z_mean <- weighted.mean(ovs$mi_z_score, ovs$Probability)
osv_z_mean <- weighted.mean(osv$mi_z_score, osv$Probability)
tribble(
~word_order, ~mi_z_score,
"OVS", ovs_z_mean,
"SOV", sov_z_mean,
"OSV", osv_z_mean,
"VOS", vos_z_mean,
"VSO", vso_z_mean,
"SVO", svo_z_mean
) %>% arrange(desc(mi_z_score)) %>%
mutate(language = df$language[[1]])
}
#              farsi, finnish, french, galician, german, gothic, greek, hebrew,
#              hindi, hungarian, indonesian, irish, italian, japanese, karelian,
#              kazakh, komi_permyak, komi_zyrian, korean, kurmanji, latin, latvian,
#              lithuanian, livvi, maltese, mandarin, marathi, mbya_guarani, moksha,
#              nigerian_pidgin, north_sami, norwegian, old_church_slavonic, old_french,
#              old_russian, polish, portuguese, romanian, russian, sanskrit,
#              scottish_gaelic, serbian, skolt_sami, slovakian, slovenian, spanish,
#              swedish, swedish_sign, swiss_german, tagalog, tamil, telugu, thai,
#              turkish, ukrainian, upper_sorbian, urdu, uyghur, vietnamese, warlpiri,
#              welsh, wolof, yoruba)
langs <- list(basque, breton, dutch, english, german, hindi, hungarian, indonesian, irish,
japanese, korean, mandarin, mbya_guarani, scottish_gaelic, tagalog,
turkish, vietnamese, warlpiri, welsh, wolof)
big_table_o_data <- tribble(
~language, ~measure, ~word_order, ~score, ~rank
) %>%
bind_rows(map_df(langs, function(df) {
bind_rows(#calcEntRankings(filter(df, !str_detect(language, "subset"))),
#calcSurpRankings(filter(df, !str_detect(language, "subset")),
calcMIRankings(filter(df, !str_detect(language, "subset"))))
}))
class_accs <- left_join(filter(big_table_o_data, rank == 1), rename(meta, language = Language), big_table_o_data, by = "language") %>%
mutate(acc = as.integer(word_order == Classification))
meta <- read_csv("metadata/language metadata.csv")
class_accs <- left_join(filter(big_table_o_data, rank == 1), rename(meta, language = Language), big_table_o_data, by = "language") %>%
mutate(acc = as.integer(word_order == Classification))
prediction_accuracies_class <- tribble(
#~ent_uid, ~surp_uid,
~mi,
#sum(filter(class_accs, measure == "entropy UID")$acc), sum(filter(class_accs, measure == "surprisal UID")$acc),
sum(filter(class_accs, measure == "mi")$acc)
)
prediction_accuracies_class
most_common_word_order <- function(df) {
x <- select(df, SVO, SOV, VSO, VOS, OVS, OSV)
colnames(x)[apply(x,1,which.max)]
}
count_accs <- left_join(filter(big_table_o_data, rank == 1), rename(mutate(meta, most_common = most_common_word_order(meta)), language = Language), big_table_o_data, by = "language") %>%
mutate(acc = as.integer(word_order == most_common))
prediction_accuracies_counts <- tribble(
# ~ent_uid, ~surp_uid,
~mi,
#sum(filter(count_accs, measure == "entropy UID")$acc), sum(filter(count_accs, measure == "surprisal UID")$acc),
sum(filter(count_accs, measure == "mi")$acc)
)
prediction_accuracies_counts
5/20
calc_precision <- function(m, class) {
true_pos <- class_accs %>%
filter(measure == m, Classification == class) %>%
select(acc) %>%
sum
false_pos <- class_accs %>%
filter(measure == m, word_order == class, Classification != class) %>%
nrow
returnValue(true_pos/(true_pos+false_pos))
}
calc_recall <- function(m, class) {
true_pos <- class_accs %>%
filter(measure == m, Classification == class) %>%
select(acc) %>%
sum
returnValue(true_pos/(unique(select(filter(class_accs, measure == m, Classification == class), language, acc)$language) %>% length))
}
(confusion_matrix <- tribble(
~measure, ~svo_precision, ~svo_recall, ~sov_precision, ~sov_recall, ~vso_precision, ~vso_recall,
# "entropy UID", 100*calc_precision(m = "entropy UID", class = "SVO"), 100*calc_recall(m = "entropy UID", class = "SVO"), 100*calc_precision(m = "entropy UID", class = "SOV"), 100*calc_recall(m = "entropy UID", class = "SOV"), 100*calc_precision(m = "entropy UID", class = "VSO"), 100*calc_recall(m = "entropy UID", class = "VSO"),
#  "surprisal UID", 100*calc_precision(m = "surprisal UID", class = "SVO"), 100*calc_recall(m = "surprisal UID", class = "SVO"), 100*calc_precision(m = "surprisal UID", class = "SOV"), 100*calc_recall(m = "surprisal UID", class = "SOV"), 100*calc_precision(m = "surprisal UID", class = "VSO"), 100*calc_recall(m = "surprisal UID", class = "VSO"),
"mi", 100*calc_precision(m = "mi", class = "SVO"), 100*calc_recall(m = "mi", class = "SVO"), 100*calc_precision(m = "mi", class = "SOV"), 100*calc_recall(m = "mi", class = "SOV"), 100*calc_precision(m = "mi", class = "VSO"), 100*calc_recall(m = "mi", class = "VSO")
))
z_score <- function(df) {
mean_mi <- mean(df$Mutual_Information)
sd_mi <- sd(df$Mutual_Information)
df %>% mutate(mi_z_score = (Mutual_Information-mean_mi)/sd_mi)
}
z_scores <- tribble(
~language, ~word_order, ~score
) %>% bind_rows(map_df(langs, function(df) {
rename(filter(df, !str_detect(language, "subset")) %>%
z_score %>%
calcZScoreRankings, score = mi_z_score)
}))
(svo_agg_mi <- z_scores %>% filter(word_order == "SVO") %>% select(score) %>% summarize(avg = mean(score)))
(sov_agg_mi <- z_scores %>% filter(word_order == "SOV") %>% select(score) %>% summarize(avg = mean(score)))
(vso_agg_mi <- z_scores %>% filter(word_order == "VSO") %>% select(score) %>% summarize(avg = mean(score)))
(vos_agg_mi <- z_scores %>% filter(word_order == "VOS") %>% select(score) %>% summarize(avg = mean(score)))
(ovs_agg_mi <- z_scores %>% filter(word_order == "OVS") %>% select(score) %>% summarize(avg = mean(score)))
(osv_agg_mi <- z_scores %>% filter(word_order == "OSV") %>% select(score) %>% summarize(avg = mean(score)))
(tribble(
~word_order, ~score,
"OVS", ovs_agg_mi,
"SOV", sov_agg_mi,
"OSV", osv_agg_mi,
"VOS", vos_agg_mi,
"VSO", vso_agg_mi,
"SVO", svo_agg_mi
) %>% arrange(desc(score)))
(tribble(
~word_order, ~score,
"OVS", ovs_agg_mi[[1]],
"SOV", sov_agg_mi[[1]],
"OSV", osv_agg_mi[[1]],
"VOS", vos_agg_mi[[1]],
"VSO", vso_agg_mi[[1]],
"SVO", svo_agg_mi[[1]]
) %>% arrange(desc(score)))
z_scores %>% filter(word_order == "SVO") %>% select(score) %>% summarize(sd = sd(score)))
z_scores %>% filter(word_order == "SVO") %>% select(score) %>% summarize(sd = sd(score))
z_scores %>% filter(word_order == "SOV") %>% select(score) %>% summarize(sd = sd(score))
z_scores %>% filter(word_order == "VOS") %>% select(score) %>% summarize(sd = sd(score))
z_scores %>% filter(word_order == "VSO") %>% select(score) %>% summarize(sd = sd(score))
